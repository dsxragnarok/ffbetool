name: Release

permissions:
  contents: write
  actions: write

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

  cross-build:
    name: Cross-compile
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os_name: linux-x64
          - target: aarch64-unknown-linux-gnu
            os_name: linux-arm64
          - target: x86_64-pc-windows-gnu
            os_name: windows-x64
          - target: x86_64-apple-darwin
            os_name: macos-x64
          - target: aarch64-apple-darwin
            os_name: macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-cross-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-cross-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binary
      run: cross build --release --target ${{ matrix.target }}

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        cd release-assets
        
        # Create release directory
        release_dir="ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}"
        mkdir -p "$release_dir"
        
        # Copy binary
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp "../target/${{ matrix.target }}/release/ffbetool.exe" "$release_dir/"
          binary_name="ffbetool.exe"
        else
          cp "../target/${{ matrix.target }}/release/ffbetool" "$release_dir/"
          binary_name="ffbetool"
        fi
        
        # Copy additional files
        cp ../README.md "$release_dir/"
        cp ../LICENSE "$release_dir/"
        
        # Create archive
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          zip -r "ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.zip" "$release_dir"
          echo "ASSET_PATH=release-assets/ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.zip" >> $GITHUB_ENV
          echo "ASSET_CONTENT_TYPE=application/zip" >> $GITHUB_ENV
        else
          tar -czf "ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.tar.gz" "$release_dir"
          echo "ASSET_PATH=release-assets/ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=ffbetool-${{ needs.create-release.outputs.version }}-${{ matrix.os_name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_CONTENT_TYPE=application/gzip" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: ${{ env.ASSET_CONTENT_TYPE }}

  generate-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, cross-build]
    
    steps:
    - name: Download all release assets
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          
          // Get the release
          const release = await github.rest.repos.getReleaseByTag({
            owner,
            repo,
            tag: '${{ needs.create-release.outputs.version }}'
          });
          
          // Download each asset
          for (const asset of release.data.assets) {
            const response = await github.rest.repos.getReleaseAsset({
              owner,
              repo,
              asset_id: asset.id,
              headers: {
                Accept: 'application/octet-stream'
              }
            });
            
            fs.writeFileSync(asset.name, Buffer.from(response.data));
          }

    - name: Generate SHA256 checksums
      run: |
        sha256sum *.zip *.tar.gz > SHA256SUMS
        cat SHA256SUMS

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain
